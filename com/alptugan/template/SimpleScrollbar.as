package com.alptugan.Template{	import flash.display.DisplayObject;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;			/**	 * @author Antti Kupila	 */	public class SimpleScrollbar extends Sprite {				// _________________________________________________________________________		// VARIABLES			private var target : DisplayObject;		private var padding :  uint;		private var bg : Shape;		private var handle : Sprite;		private var scrollWidth : Number;		private var pos : Number = 0;		private var currentPos : Number = 0;				// _________________________________________________________________________		// CONSTRUCTOR			public function SimpleScrollbar( scrollTarget : DisplayObject, padding : uint ) {						this.target = scrollTarget;			this.padding = padding;						scrollTarget.x = padding;						bg = new Shape( );			bg.graphics.beginFill( 0xd7d7d7);			bg.graphics.drawRect( 0, 0, 100, 5 );			bg.x = -padding;			addChild( bg );						handle = new Sprite( );			handle.graphics.beginFill( 0x787878 );			handle.graphics.drawRect( 0, 0, 10, 5);			handle.addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );			addChild( handle );			handle.buttonMode = true;			x = padding;						addEventListener( Event.ADDED_TO_STAGE, addedToStageHandler );			addEventListener( Event.ENTER_FRAME, enterFrameHandler );					}				// _________________________________________________________________________		// PROTECTED METHODS			protected function update( ) : void {			handle.width = Math.round( Math.min( scrollWidth / target.width, 1 ) * scrollWidth );						handle.x = ( scrollWidth - handle.width ) * pos;		}		// _________________________________________________________________________		// EVENT HANDLERS			protected function addedToStageHandler( e : Event ) : void {			removeEventListener( Event.ADDED_TO_STAGE, addedToStageHandler );			//stage.addEventListener( Event.RESIZE, resizeHandler );		}				protected function resizeHandler( e : Event ) : void {			scrollWidth = stage.stageWidth - padding * 2;			bg.width = stage.stageWidth;			update( );		}				protected function mouseDownHandler( e : MouseEvent ) : void {			stage.addEventListener( MouseEvent.MOUSE_UP, mouseUpHandler );			stage.addEventListener( MouseEvent.MOUSE_MOVE, moveHandler );			handle.startDrag( false, new Rectangle( 0, 0, scrollWidth - handle.width, 0 ) );		}				protected function mouseUpHandler( e : Event ) : void {			stage.removeEventListener( MouseEvent.MOUSE_UP, mouseUpHandler );			stage.removeEventListener( MouseEvent.MOUSE_MOVE, moveHandler );			handle.stopDrag( );		}				protected function enterFrameHandler( e : Event ) : void {			currentPos += ( pos - currentPos ) * 0.4;			target.x = -currentPos * ( target.width - scrollWidth ) + padding;		}				protected function moveHandler( e : MouseEvent ) : void {			pos = handle.x / ( scrollWidth - handle.width );			if ( pos < 0 || isNaN( pos ) ) pos = 0;			if ( pos > 1 ) pos = 1;		}		// _________________________________________________________________________		// PUBLIC API METHODS			public function updateSize( ) : void {			try {				resizeHandler( null );			} catch ( e : Error ) {				trace( e );			}		}			}}